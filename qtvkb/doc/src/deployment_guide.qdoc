/****************************************************************************
**
** Copyright (C) 2013 Digia Plc
** All rights reserved.
** For any questions to Digia, please use contact form at http://qt.digia.com
**
** This file is part of the Qt Quick Enterprise Controls add-on.
**
** Licensees holding valid Qt Enterprise licenses may use this file in
** accordance with the Qt Enterprise License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.
**
** If you have questions regarding the use of this file, please use
** contact form at http://qt.digia.com
**
****************************************************************************/

/*!

\page deployment_guide.html
\contentspage {Deployment Guide} {Contents}

\title Deployment Guide

\section1 Overview

This document describes how to deploy and use the QtVKB plugin with
Qt5 applications.

\section1 Deployment

The QtVKB plugin must be properly deployed before it can be used.
The easiest way to do the deployment is to add a deployment step
in QtCreator that executes make install command.

The make install deploys the files in the following locations:

\table
\header
    \li Item
    \li Desktop install path
    \li Boot2Qt install path
\row
    \li qtvkbplugin
    \li \c $$[QT_INSTALL_PLUGINS]/platforminputcontexts
    \li \c /system/plugins/platforminputcontexts
\row
    \li qtvkbplugin QML files
    \li \c $$[QT_INSTALL_QML]/QtVkb
    \li \c /system/qml/QtVkb
\row
    \li qtvkbstylesplugin
    \li \c $$[QT_INSTALL_QML]/QtVkb/Styles
    \li \c /system/qml/QtVkb/Styles
\endtable

\section1 Integration method

The QtVKB currently supports two alternative integration methods
for using the plugin:

\list
    \li \c Desktop: The QtVKB is integrated to the Qt5 and requires no
        changes to the existing applications. The QtVKB input method
        is available for all the Qt5 applications in the system.
    \li \c Application: The QtVKB is integrated to the Qt5, but requires
        changes to particular application using the QtVKB. This method is
        mandatory in Boot2Qt environment, but can be used in desktop
        applications too.
\endlist

The integration method is automatically selected by the project files.
However, in desktop environment, it is possible to override the desktop
integration method and use the application integration method instead.
This happens by adding \c CONFIG+=disable-xcb option to the qmake command
line.

\note The desktop integration method is not currently available in Boot2Qt
environment.

\section1 Loading the plugin

In both integration methods the application must use the QT_IM_MODULE
environment variable to load the plugin. For example:

\code
$ QT_IM_MODULE=qtvkb myapp
\endcode

or in the main() function:

\code
qputenv("QT_IM_MODULE", QByteArray("qtvkb"));
\endcode

In desktop integration method, this step is all that is required to
use the QtVKB. In application integration method, the application is
required to create an instance of InputPanel as explained in the
following chapter.

\section1 Creating InputPanel

The following example shows how to create InputPanel and how to
divide the screen area with the application container.

\code
import QtQuick 2.0
import QtVkb 1.0

Item {
    id: root
    Item {
        id: appContainer
        anchors.left: parent.left
        anchors.top: parent.top
        anchors.right: parent.right
        anchors.bottom: inputPanel.top
        ...
    }
    InputPanel {
        id: inputPanel
        y: Qt.inputMethod.visible ? appContainer.height - inputPanel.height : appContainer.height
        anchors.left: parent.left
        anchors.right: parent.right
        anchors.bottom: parent.bottom
    }
}
\endcode

The input panel must be a sibling element next to application container.
It is important not to put the input panel within the application container,
since then it would overlap with the contents of the application. Also, the
input panel height will be automatically updated according to available width,
i.e. the aspect ratio of the input panel is constant.

If the application contains Flickable elements they will be automatically
scrolled to focused element.

*/
