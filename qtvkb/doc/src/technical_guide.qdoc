/****************************************************************************
**
** Copyright (C) 2013 Digia Plc
** All rights reserved.
** For any questions to Digia, please use contact form at http://qt.digia.com
**
** This file is part of the Qt Quick Enterprise Controls add-on.
**
** Licensees holding valid Qt Enterprise licenses may use this file in
** accordance with the Qt Enterprise License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.
**
** If you have questions regarding the use of this file, please use
** contact form at http://qt.digia.com
**
****************************************************************************/

/*!

\page technical_guide.html
\contentspage {Technical Guide} {Contents}

\title Technical Guide

\section1 Overview

This document provides a technical overview of the QtVKB plugin.

\section1 Basic Concepts

The QtVKB project is a Qt 5 input context plugin which implements
QPlatformInputContextPlugin and QPlatformInputContext interfaces.
These interfaces allow the plugin to be used as a platform input
context plugin in Qt 5 applications.

The plugin itself provides an input framework supporting multiple
input methods as well as a QML UI for the virtual keyboard.

The input framework provides the following main interfaces:

\list
    \li InputContext: provides contextual information for the virtual keyboard
        and other input components.
    \li InputEngine: exposes an API to integrate user input events (key
        presses, etc.) and acts as a host for input methods.
    \li InputMethod: a base type for QML based input methods.
    \li AbstractInputMethod: a base type for C++ based input methods.
\endlist

\section1 The Input Context

The input context is used by the keyboard as well as concrete input methods.

\section2 Contextual Information

The input context provides access to contextual information that originates
from the application. This information includes, but is not limited to:

\list
    \li InputContext::cursorPosition
    \li InputContext::cursorRectangle
    \li InputContext::inputMethodHints
    \li InputContext::preeditText
    \li InputContext::selectedText
    \li InputContext::surroundingText
\endlist

\section2 Locale

When a keyboard layout is activated, the keyboard should set a matching locale
for the input context. This can be done with the InputContext::locale property.
Once the locale is set, it is reflected to the current input method and the
underlying application (through QPlatformInputContext).

\section2 UI Animations

The keyboard should notify the input context about UI transitions and
animations. The InputContext::animating property sets the animating property of
the input context.

\section1 The Input Engine

The input engine object is owned by InputContext. The input engine contains
API functions which the keyboard can use to map user interactions such as key
press and key release events.

The input events are mapped through the following methods:

\list
    \li InputEngine::virtualKeyPress
    \li InputEngine::virtualKeyRelease
\endlist

The above-mentioned methods are intended for the integration of the virtual
keyboard, hence the word "virtual" in the methods' names. This also means that
the methods are not suitable for mapping the physical keystrokes. This is a
consequence of the fact that the actual action is performed only when the key
is released.

If the user releases the key without having to perform the actual action, the
key can be interrupted by using the InputEngine::virtualKeyCancel method.

\section2 Activating an Input Method

Activating an input method is straightforward. The required steps are:

\list
    \li Instantiate a concrete implementation of InputMethod or
        AbstractInputMethod
    \li Assign the instance to InputEngine::inputMethod
    \li Set the proper input mode with InputEngine::inputMode
\endlist

When the input method is active, it receives key events from the input engine
and can produce text.

\section1 Implementing a Custom Input Method

The implementation of input methods starts by deciding which interface is used;
QML or C++. In this example the QML interface is used.

The following example shows the minimum functionality that is required
from an input method:

\quotefile examples/CustomInputMethod.qml

The InputMethod::inputModes() method is called by the input engine before
an input mode is set. The method returns a list of input modes available in
the given locale.

An input method is initialized in InputMethod::setInputMode() method with
a locale and input mode. After setting the locale and input mode, the input
method should be ready for use.

InputMethod::reset() is called when an input method needs to be reset. The reset
must only reset the internal state of the input method, and not the user text.

InputMethod::update() is called when the input context is updated and
the input state is possibly out of sync. The input method should commit
the current text.

The keystorke events are handled in InputMethod::keyEvent(). This method handles
a single keystroke event and returns \c true if the event was processed.
Otherwise the keystroke is handled by the default input method.

\section2 Selection Lists

Selection lists are an optional feature that can be integrated into the input
method. The input framework supports various types of lists, such as the word
candidate list. Responsibilities in implementing the lists are handled such
that the input method is responsible for the content and activities, such as the
click behavior. The input framework is responsible for maintaining the list
model and delivery to the user interface.

\section3 Allocating the Selection Lists

Selection lists are allocated when the input method is activated. The
InputMethod::selectionLists() method returns a list of the required selection
list types:

\code
function selectionLists() {
    return [SelectionListModel.WordCandidateList];
}
\endcode

In the above example, the input method allocates the word candidate list for its
use.

\section3 Updating the Selection Lists

When the input method requires the UI to update the contents of a selection
list, it will emit the InputMethod::selectionListChanged signal. Likewise, if
the input method requires the UI to highlight an item in the list, it will emit
the InputMethod::selectionListActiveItemChanged signal.

\code
selectionListChanged(SelectionListModel.WordCandidateList)
selectionListActiveItemChanged(SelectionListModel.WordCandidateList, wordIndex)
\endcode

\section3 Populating Items in the Selection Lists

The items are populated with method callbacks which will provide the number of
items in a list as well as the data for individual items.

The InputMethod::selectionListItemCount callback requests the number of
items in the list identified by the given type.

\code
function selectionListItemCount(type) {
    if (type == SelectionListModel.WordCandidateList) {
        return wordList.length
    }
    return 0
}
\endcode

The InputMethod::selectionListData callback requests the data for items.

\code
function selectionListData(type, index, role) {
    var result = null
    if (type == SelectionListModel.WordCandidateList) {
        switch (role) {
        case SelectionListModel.DisplayRole:
            result = wordList[index]
            break
        default:
            break
        }
    }
    return result
}
\endcode

The \a role parameter identifies which data is requested for an item. For
example, the SelectionListModel.DisplayRole requests the display text data.

\section3 Responding to User Actions

When the user selects an item in the list, the input method responds to the
event in the InputMethod::selectionListItemSelected method callback.

\code
function selectionListItemSelected(type, index) {
    if (type == SelectionListModel.WordCandidateList) {
        inputContext.commit(wordlist[index])
        update()
    }
}
\endcode

\section1 Integrating Selection Lists into the UI

The input engine provides a list model for each selection list type.
The model is null while the list is not allocated, allowing the UI
to hide the list if necessary.

The list model's word candidate list is provided by the
InputEngine::wordCandidateListModel property.

*/
