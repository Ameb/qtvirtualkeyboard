/****************************************************************************
**
** Copyright (C) 2013 Digia Plc
** All rights reserved.
** For any questions to Digia, please use contact form at http://qt.digia.com
**
** This file is part of the Qt Quick Enterprise Controls add-on.
**
** Licensees holding valid Qt Enterprise licenses may use this file in
** accordance with the Qt Enterprise License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.
**
** If you have questions regarding the use of this file, please use
** contact form at http://qt.digia.com
**
****************************************************************************/

#include "declarativeinputmethod.h"
#include <QVariant>

/*!
    \qmltype InputMethod
    \instantiates DeclarativeInputMethod
    \inqmlmodule QtVkb 1.0
    \brief The InputMethod provides a way to implement an input method in QML.

    The InputMethod type lets you create a custom input method
    which can be assigned to InputEngine.
*/

/*!
    \qmlproperty string InputMethod::className

    See AbstractInputMethod::className
*/

/*!
    \qmlproperty InputContext InputMethod::inputContext

    The input context.
*/

/*!
    \qmlproperty InputEngine InputMethod::inputEngine

    The input engine.
*/

/*!
    \qmlmethod list<int> InputMethod::inputModes(string locale)

    Returns a list of input modes for \a locale.
*/

/*!
    \qmlmethod bool InputMethod::setInputMode(string locale, int inputMode)

    Changes \a inputMode and \a locale for input method. The method returns true
    if successful.
*/

/*!
    \qmlmethod bool InputMethod::setTextCase(int textCase)

    Updates \a textCase for input method. The method returns true if successful.

    Here is a list of possible values for text case.

    \list
        \li \c InputEngine.Lower Lower case text.
        \li \c InputEngine.Upper Upper case text.
    \endlist
*/

/*!
    \qmlmethod bool InputMethod::keyEvent(int key, string text, int modifiers)

    Purpose of this method is to handle the key events generated by the the
    input engine.

    The \a key parameter specifies code of the key to handle. The key code
    does not distinguish between capital and non-capital letters. The \a
    text parameter contains the Unicode text for the key. The \a modifiers
    parameter contains the key modifiers that apply to key.

    This method returns true if the key event was successfully handled.
    If the return value is false, the key event is redirected for default
    input method for futher processing.
*/

/*!
    \qmlmethod InputMethod::reset()

    This method is called by input engine when input method needs
    reset. The input method must reset internal state only. The main
    difference to update() method is that the reset() modifies only
    the input method state, i.e. it must not modify the input context.
*/

/*!
    \qmlmethod InputMethod::update()

    This method is called by input engine when input method needs
    update. The input method must close current pre-edit text and
    restore internal state to default.
*/

/*!
    \qmlmethod list<int> InputMethod::selectionLists()

    Returns list of selection lists used for input method.

    This method is called by input engine when the input method is being
    activated. The input method can reserve the selection lists for its use
    by returning a list of selection list types required.
*/

/*!
    \qmlmethod int InputMethod::selectionListItemCount(int type)

    Returns number of items in the selection list identified by \a type.
*/

/*!
    \qmlmethod var InputMethod::selectionListData(int type, int index, int role)

    Returns item data for a selection list identified by \a type. The \a role
    parameter specifies which data is requested. The \a index parameter is a
    zero based index to list.
*/

/*!
    \qmlmethod void InputMethod::selectionListItemSelected(int type, int index)

    This method is called when an item at \a index has been selected by user.
    The selection list is identified by \a type parameter.
*/

/*!
    \qmlsignal InputMethod::selectionListChanged(int type)

    The input method emits this signal when the contents of selection list
    is changed. The \a type parameter specifies which selection list has changed.
*/

/*!
    \qmlsignal InputMethod::selectionListActiveItemChanged(int type, int index)

    The input method emits this signal when the current \a index has changed
    in the selection list identified by \a type.
*/

DeclarativeInputMethod::DeclarativeInputMethod(QObject *parent) :
    AbstractInputMethod(parent)
{
}

DeclarativeInputMethod::~DeclarativeInputMethod()
{
}

QList<DeclarativeInputEngine::InputMode> DeclarativeInputMethod::inputModes(const QString& locale)
{
    QVariant result;
    QMetaObject::invokeMethod(this, "inputModes",
                              Q_RETURN_ARG(QVariant, result),
                              Q_ARG(QVariant, locale));
    QList<DeclarativeInputEngine::InputMode> inputModeList;
    foreach (const QVariant& inputMode, result.toList()) {
        inputModeList.append(static_cast<DeclarativeInputEngine::InputMode>(inputMode.toInt()));
    }
    return inputModeList;
}

bool DeclarativeInputMethod::setInputMode(const QString& locale, DeclarativeInputEngine::InputMode inputMode)
{
    QVariant result;
    QMetaObject::invokeMethod(this, "setInputMode",
                              Q_RETURN_ARG(QVariant, result),
                              Q_ARG(QVariant, locale),
                              Q_ARG(QVariant, static_cast<int>(inputMode)));
    return result.toBool();
}

bool DeclarativeInputMethod::setTextCase(DeclarativeInputEngine::TextCase textCase)
{
    QVariant result;
    QMetaObject::invokeMethod(this, "setTextCase",
                              Q_RETURN_ARG(QVariant, result),
                              Q_ARG(QVariant, static_cast<int>(textCase)));
    return result.toBool();
}

bool DeclarativeInputMethod::keyEvent(Qt::Key key, const QString& text, Qt::KeyboardModifiers modifiers)
{
    QVariant result;
    QMetaObject::invokeMethod(this, "keyEvent",
                              Q_RETURN_ARG(QVariant, result),
                              Q_ARG(QVariant, key),
                              Q_ARG(QVariant, text),
                              Q_ARG(QVariant, (int)modifiers));
    return result.toBool();
}

QList<DeclarativeSelectionListModel::Type> DeclarativeInputMethod::selectionLists()
{
    QVariant result;
    QMetaObject::invokeMethod(this, "selectionLists",
                              Q_RETURN_ARG(QVariant, result));
    QList<DeclarativeSelectionListModel::Type> selectionListsList;
    foreach (const QVariant& selectionListType, result.toList()) {
        selectionListsList.append(static_cast<DeclarativeSelectionListModel::Type>(selectionListType.toInt()));
    }
    return selectionListsList;
}

int DeclarativeInputMethod::selectionListItemCount(DeclarativeSelectionListModel::Type type)
{
    QVariant result;
    QMetaObject::invokeMethod(this, "selectionListItemCount",
                              Q_RETURN_ARG(QVariant, result),
                              Q_ARG(QVariant, static_cast<int>(type)));
    return result.toInt();
}

QVariant DeclarativeInputMethod::selectionListData(DeclarativeSelectionListModel::Type type, int index, int role)
{
    QVariant result;
    QMetaObject::invokeMethod(this, "selectionListData",
                              Q_RETURN_ARG(QVariant, result),
                              Q_ARG(QVariant, static_cast<int>(type)),
                              Q_ARG(QVariant, index),
                              Q_ARG(QVariant, role));
    if (result.isNull()) {
        result = AbstractInputMethod::selectionListData(type, index, role);
    }
    return result;
}

void DeclarativeInputMethod::selectionListItemSelected(DeclarativeSelectionListModel::Type type, int index)
{
    QMetaObject::invokeMethod(this, "selectionListItemSelected",
                              Q_ARG(QVariant, static_cast<int>(type)),
                              Q_ARG(QVariant, index));
}

void DeclarativeInputMethod::reset()
{
    QMetaObject::invokeMethod(this, "reset");
}

void DeclarativeInputMethod::update()
{
    QMetaObject::invokeMethod(this, "update");
}
